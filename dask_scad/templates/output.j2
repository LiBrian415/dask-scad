#@ type: compute
{%- if parents %}
#@ parents:
{%- for p in parents %}
#@    - {{p.get_id()}}
{%- endfor %}
{%- endif %}
{%- if corunning %}
#@ corunning:
{%- for c in corunning %}
#@    {{c.get_id()}}:
#@        trans: {{c.get_id()}}
#@        type: rdma
{%- endfor %}
{%- endif %}

import cloudpickle


def main(params, action):
    try:
        # Input Processing
        cache = dict()
        for _, v in params:
            if v['error']:
                raise
            (k, t, a, s) = v['mem']

            trans = action.get_transport(t, 'rdma')
            trans.reg(s)
            trans.read(s, a, 0)
            cache[k] = cloudpickle.loads(trans.buf[:s])

        # Output Processing
        output = {'output': dict(), 'error': False}
        for k, v in cache.items():
            serialized = cloudpickle.dumps(v)
            path = 'dummy' #TODO: add actual storage
            output['output'][k] = path

        return output
    except Exception:
        return {'error' : True}
